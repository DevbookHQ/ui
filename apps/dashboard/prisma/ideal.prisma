datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator js {
  provider = "prisma-client-js"
}

model User {
  // `id` here is the Supabase Auth ID
  id        String   @id
  createdAt DateTime @default(now())

  teams    UsersInTeams[]
  feedback UserFeedback[]
  apiKeys  ApiKey[]
}

model ApiKey {
  key       String   @id
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String
}

model UserFeedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  feedback String

  user   User   @relation(fields: [userID], references: [id])
  userID String
}

model UsersInTeams {
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String

  team   Team   @relation(fields: [teamID], references: [id], onDelete: Cascade)
  teamID String

  @@id([userID, teamID])
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name String

  users UsersInTeams[]
  apps  App[]
}

model App {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  subdomain String[]

  env     Env?
  content AppContent?

  feedback AppFeedback[]
  slack    SlackInstallation[]

  repository   GitHubInstallation? @relation(fields: [repositoryID], references: [repositoryID])
  repositoryID Int?
  branch       String
  path         String              @default("./")

  team   Team   @relation(fields: [teamID], references: [id], onDelete: Cascade)
  teamID String
}

model AppContent {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Json

  app   App    @relation(fields: [appID], references: [id], onDelete: Cascade)
  appID String @unique

  @@id([appID])
}

model AppFeedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  feedback   String
  properties Json

  app   App    @relation(fields: [appID], references: [id], onDelete: Cascade)
  appID String
}

model GitHubInstallation {
  repositoryID       Int    @id
  // `installationID` identifies the connection between Devbook GitHub app and the GitHub repository.
  // When you remove Devbook app from the repository on GitHub
  // and then add add the app again this installationID will change - we are handling this in the Devbook app.
  installationID     Int    @unique
  // Full name of the GitHub repository in the moment when the repository was connected to Devbook.
  // Is can be used as a fallback when retrieving repository info from GitHub and for navigating DB when debugging.
  repositoryFullName String

  apps App[]
}

model SlackInstallation {
  // This is the id of the Slack workspace
  id        String
  createdAt DateTime @default(now())

  installationData Json

  app   App    @relation(fields: [appID], references: [id], onDelete: Cascade)
  appID String

  @@id([id, appID])
}

model Env {
  id             String    @id
  createdAt      DateTime  @default(now())
  lastAccessedAt DateTime?

  template String

  app   App    @relation(fields: [appID], references: [id], onDelete: Cascade)
  appID String @unique
}
