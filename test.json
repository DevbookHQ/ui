{
  "intro": {
    "title": "Create a column in a table",
    "tags": [
      "Column",
      "Create",
      "Table"
    ],
    "image": "/img/create-column-table.svg",
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In this guide, you will learn how to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create a column in a table\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Evolve your database schema using Prisma Migrate\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Query your database to validate your changes\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {
        "title": "Create a column in a table",
        "image": "/img/create-column-table.svg",
        "tags": [
          "Column",
          "Create",
          "Table"
        ]
      },
      "scope": {}
    }
  },
  "title": "Creating a column",
  "environmentID": "Pc0L7UgBx62J",
  "steps": [
    {
      "type": "Guide",
      "title": "Update an existing model with a new yx-->cliqw field",
      "layout": {
        "type": "Code",
        "props": {
          "tabs": [
            {
              "path": "/code/prisma/schema.prisma"
            }
          ]
        }
      },
      "content": {
        "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\",\n    blockquote: \"blockquote\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Check, CodeBlock} = _components;\n  if (!Check) _missingMdxReference(\"Check\", true);\n  if (!CodeBlock) _missingMdxReference(\"CodeBlock\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When adding a new field to a model with existing data, you can either\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"?\"\n        }), \" operator to mark the field as nullable\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Provide a default value using the \", _jsx(_components.code, {\n          children: \"@default()\"\n        }), \" attribute function\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"On the left is a Prisma schema (\", _jsx(_components.code, {\n        children: \"prisma/schema.prisma\"\n      }), \") file.\"]\n    }), \"\\n\", _jsxs(Check, {\n      checkID: \"Add likes column\",\n      children: [_jsxs(_components.p, {\n        children: [\"Update the \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \" model by adding a \", _jsx(_components.code, {\n          children: \"likes\"\n        }), \" field with a default value of 0.\"]\n      }), _jsx(CodeBlock, {\n        title: \"schema.prisma\",\n        lang: \"prisma\",\n        children: `likes     Int      @default(0)`\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"HINT\"\n          }), \": You can hit \", _jsx(\"kbd\", {\n            children: \"CMD\"\n          }), \"/\", _jsx(\"kbd\", {\n            children: \"CTRL\"\n          }), \" + \", _jsx(\"kbd\", {\n            children: \"S\"\n          }), \" to invoke the auto formatting in the  Prisma schema.\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Your \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \" model should resemble the following after adding the \", _jsx(_components.code, {\n          children: \"likes\"\n        }), \" field:\"]\n      }), _jsx(CodeBlock, {\n        title: \"schema.prisma\",\n        lang: \"prisma\",\n        children: `model Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  likes     Int      @default(0)\n\n  authorId  Int?\n  author    User?     @relation(fields: [authorId], references: [id])\n}`\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Once you're done, proceed to the next step to generate a migration.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
        "frontmatter": {
          "title": "Update an existing model with a new yx-->cliqw field",
          "layout": {
            "type": "Code",
            "props": {
              "tabs": [
                {
                  "path": "/code/prisma/schema.prisma"
                }
              ]
            }
          }
        },
        "scope": {}
      }
    },
    {
      "type": "Guide",
      "title": "Create a database migration",
      "layout": {
        "type": "Code",
        "props": {
          "tabs": [
            {
              "path": "/code/prisma/schema.prisma"
            }
          ]
        }
      },
      "content": {
        "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    strong: \"strong\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Check, TerminalCommand, Filetree} = _components;\n  if (!Check) _missingMdxReference(\"Check\", true);\n  if (!Filetree) _missingMdxReference(\"Filetree\", true);\n  if (!TerminalCommand) _missingMdxReference(\"TerminalCommand\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"To map the updated data model to the database schema you will use the \", _jsx(_components.code, {\n        children: \"prisma migrate dev\"\n      }), \" command.\"]\n    }), \"\\n\", _jsxs(Check, {\n      checkID: \"Run prisma migrate dev\",\n      children: [_jsx(_components.p, {\n        children: \"Run the following command on the terminal:\"\n      }), _jsx(TerminalCommand, {\n        rootdir: \"/code\",\n        cmd: \"npx prisma migrate dev --name add-likes-column\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command does the following:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"It creates a new SQL migration file for this migration\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"It runs the SQL migration file against the database\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Explore the generated migration\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The generated generated migration is saved in the \", _jsx(_components.code, {\n        children: \"migrations\"\n      }), \" directory.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can view the generated migration by clicking on the folder with the name you set in the previous step to expand on it and then  click on the \", _jsx(_components.code, {\n        children: \"migration.sql\"\n      }), \" file. This will open the file on the editor to the left to view the generated migration.\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note\"\n        }), \": The \", _jsx(_components.code, {\n          children: \"TIMESTAMP_init\"\n        }), \" migration represents the initial state of the database before you made the update.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Filetree, {\n      rootPath: \"/code/prisma/migrations\",\n      ignore: ['/code/prisma/migrations/*.toml']\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The generated SQL migration describes the the changes you made to the Prisma schema.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Once you're done, proceed to the next step.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
        "frontmatter": {
          "title": "Create a database migration",
          "layout": {
            "type": "Code",
            "props": {
              "tabs": [
                {
                  "path": "/code/prisma/schema.prisma"
                }
              ]
            }
          }
        },
        "scope": {}
      }
    },
    {
      "type": "Guide",
      "title": "Query the database with Prisma Client",
      "layout": {
        "type": "Code",
        "props": {
          "tabs": [
            {
              "path": "/code/index.js"
            }
          ]
        }
      },
      "content": {
        "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    hr: \"hr\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Check, CodeBlock, TerminalCommand, Filetree} = _components;\n  if (!Check) _missingMdxReference(\"Check\", true);\n  if (!CodeBlock) _missingMdxReference(\"CodeBlock\", true);\n  if (!Filetree) _missingMdxReference(\"Filetree\", true);\n  if (!TerminalCommand) _missingMdxReference(\"TerminalCommand\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Now that you have added a new column in your table, you can validate it was added by using Prisma Client.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On the left is the \", _jsx(_components.code, {\n        children: \"index.js\"\n      }), \" file that you will use to define queries to read and write to your database.\"]\n    }), \"\\n\", _jsxs(Check, {\n      checkID: \"Copy Prisma Client query\",\n      children: [_jsxs(_components.p, {\n        children: [\"Inside the \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" function, add the following query to read the \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \" records from the database and print the result:\"]\n      }), _jsx(CodeBlock, {\n        lang: \"ts\",\n        children: `async function main() {\n  const post = await prisma.post.create({\n    data: {\n      title: \"Learn how to rename a table using Prisma\",\n      content: \"One command: prisma migrate dev\",\n      likes: 2,\n    }\n  })\n  console.log(post)\n}`\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now run the code with following command on the terminal:\"\n    }), \"\\n\", _jsxs(Check, {\n      checkID: \"Run Prisma Client query\",\n      children: [_jsx(TerminalCommand, {\n        rootdir: \"/code\",\n        cmd: \"npm run dev\"\n      }), _jsx(_components.p, {\n        children: \"This should output something similar to the snippet below:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\n  id: 1,\\n  createdAt: 2022-11-08T06:36:04.419Z,\\n  updatedAt: 2022-11-08T06:36:04.419Z,\\n  title: 'Learn how to rename a table using Prisma',\\n  content: 'One command: prisma migrate dev',\\n  published: false,\\n  likes: 2,\\n  authorId: null\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feel free to explore the rest of the project and play around with it further.\"\n    }), \"\\n\", _jsx(Filetree, {\n      rootPath: \"/code\",\n      ignore: ['/code/node_modules', '/code/package-lock.json', '*.sh', '*.env', '/code/.gitignore']\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! 🎉\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this guide, you learned how to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Safely add a column to a table\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Evolve your database schema using Prisma Migrate\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Run a query against your database to validate your changes\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
        "frontmatter": {
          "title": "Query the database with Prisma Client",
          "layout": {
            "type": "Code",
            "props": {
              "tabs": [
                {
                  "path": "/code/index.js"
                }
              ]
            }
          }
        },
        "scope": {}
      }
    },
    {
      "type": "Rating",
      "title": "How did you like this guide?",
      "content": {
        "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Give us rating!\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
        "frontmatter": {
          "title": "How did you like this guide?"
        },
        "scope": {}
      }
    }
  ]
}